<?php
error_reporting(0);

echo "\e[32m
#################################################################################
__________  ________            ________    ________            ___________.___ 
\______   \/  _____/            \_____  \  /  _____/            \__    ___/|   |
 |     ___/   \  ___    ______   /   |   \/   \  ___    ______    |    |   |   |
 |    |   \    \_\  \  /_____/  /    |    \    \_\  \  /_____/    |    |   |   |
 |____|    \______  /           \_______  /\______  /             |____|   |___|
                  \/                    \/        \/        
 \n
 Github : https://github.com/tismayil/password-generator
 				  
#################################################################################	\n			  
\e[0m";

$_SERVER['_GENERATED'] = array();
define("DEFAULT_PATH", __DIR__);
define("DEFAULT_FILE_NAME", "generated-password-list.txt");
class ArgvParser

	{
	const MAX_ARGV = 1000;
	public

	function parseConfigs(&$message = null)
		{
		if (is_string($message))
			{
			$argv = explode(' ', $message);
			}
		  else
		if (is_array($message))
			{
			$argv = $message;
			}
		  else
			{
			global $argv;
			if (isset($argv) && count($argv) > 1)
				{
				array_shift($argv);
				}
			}

		$index = 0;
		$configs = array();
		while ($index < self::MAX_ARGV && isset($argv[$index]))
			{
			if (preg_match('/^([^-\=]+.*)$/', $argv[$index], $matches) === 1)
				{
				$configs[$matches[1]] = true;
				}
			  else
			if (preg_match('/^-+(.+)$/', $argv[$index], $matches) === 1)
				{
				if (preg_match('/^-+(.+)\=(.+)$/', $argv[$index], $subMatches) === 1)
					{
					$configs[$subMatches[1]] = $subMatches[2];
					}
				  else
				if (isset($argv[$index + 1]) && preg_match('/^[^-\=]+$/', $argv[$index + 1]) === 1)
					{
					$configs[$matches[1]] = $argv[$index + 1];
					$index++;
					}
				  else
					{
					$configs[$matches[1]] = true;
					}
				}

			$index++;
			}

		return $configs;
		}
	}

$argvParser = new ArgvParser();
$params = $argvParser->parseConfigs($argv);
$params = (object)$params;
$params->name = DEFAULT_FILE_NAME;


if (!isset($params->info))
	{
	exit(" \e[31m --info param not found. \e[0m \n\n ");
	}

if (strtolower($params->path) == "default" || !isset($params->path))
	{
	$params->path = DEFAULT_PATH;
	}

if (!is_dir($params->path))
	{
	exit(" \e[31m $params->path not exists. \e[0m \n\n ");
	}

$md5 = false;

if (isset($params->md5))
	{
	$md5 = true;
	}

$params->info = str_replace(' ', '', $params->info);
$info = explode(",", $params->info);

if (count($info) < 2)
	{
	exit(" \e[31m You have entered very little information as an example: name, surname, age, birth place Enter information such as. \e[0m \n\n ");
	}

$list = $info;
$_sesli_harfler_buyuk = preg_split('//u', 'aeıioöuü', -1, PREG_SPLIT_NO_EMPTY);
$_sesli_harfler_kucuk = preg_split('//u', 'AEIİOÖUÜ', -1, PREG_SPLIT_NO_EMPTY);
$_rakamlar_harf_karsiligi = ['a' => 4, 'e' => 3, 'l' => 1, 'o' => 0, 'i' => '!'];
$_birlestirme_ekleri = ['_', '-', '@', '!', '.', ',', ''];
$_passwords = _init($list);
$_passwords = array_unique($_passwords);
$data = implode("\n", $_passwords);
file_put_contents($params->path . '/' . $params->name, $data);

function _init($list)
	{
	Global $_SERVER;
	$_1 = _combine($list);
	$_2 = _merge($_1);
	$_SERVER['_GENERATED'] = [];
	$_GENERATED = array_merge($_1, $_2);
	array_walk($_GENERATED, '_values');
	return $_SERVER['_GENERATED'];
	}

function _values(&$value, $key)
	{
	Global $_SERVER, $md5, $params;
	$return = [];
	if (is_array($value))
		{
		array_walk($value, '_values');
		}
	  else
		{
		if ($md5 == true)
			{
			$_SERVER['_GENERATED'][] = $value . ":" . md5($value);
			}
		  else
			{
			$_SERVER['_GENERATED'][] = $value;
			}

		if ($md5 == true)
			{
			$_SERVER['_GENERATED'][] = $value . ":" . md5($value);
			}
		  else
			{
			$_SERVER['_GENERATED'][] = $value;
			}
		}
	}

function _merge($data)
	{
	$return = [];
	for ($i = 0; $i < count($data); $i++)
		{
		$secili_array = $data[$i];
		for ($j = 0; $j < count($secili_array); $j++)
			{
			$secili_eleman = $secili_array[$j];
			for ($k = $i + 1; $k < count($data); $k++)
				{
				$birlesecek_array = $data[$k];
				for ($l = 0; $l < count($birlesecek_array); $l++)
					{
					$birlesecek_eleman = $birlesecek_array[$l];
					$return[] = _keyword_merge($secili_eleman, $birlesecek_eleman);
					}
				}
			}
		}

	return $return;
	}

function _combine($list)
	{
	$return = [];

	// 1

	for ($i = 0; $i < count($list); $i++)
		{
		$_1 = _keyword($list[$i]);
		$_2 = _clear_sesli_harf($list[$i]);
		$_3 = _harf_rakamlama($list[$i]);
		$return[] = array_unique(array_merge($_1, $_2, $_3));
		}

	return $return;
	}

function _keyword_merge($_1, $_2)
	{
	Global $_birlestirme_ekleri, $md5;
	$return = [];
	foreach($_birlestirme_ekleri as $ek)
		{
		if ($md5 == 1)
			{
			echo "Generated : \e[32m $_1.$ek.$_2:" . md5($_1 . $ek . $_2) . " \e[0m \n ";
			echo "Generated : \e[32m $_2.$ek.$_1:" . md5($_2 . $ek . $_1) . " \e[0m \n ";
			echo "Generated : \e[32m $ek.$_2.$_1:" . md5($ek . $_2 . $_1) . " \e[0m \n ";
			echo "Generated : \e[32m $ek.$_1.$_2:" . md5($ek . $_1 . $_2) . " \e[0m \n ";
			echo "Generated : \e[32m $_1.$_2.$ek:" . md5($_1 . $_2 . $ek) . " \e[0m \n ";
			echo "Generated : \e[32m $_2.$_1.$ek:" . md5($_2 . $_1 . $ek) . " \e[0m \n ";
			echo "Generated : \e[32m $_2.$ek.$_1.$ek:" . md5($_2 . $ek . $_1 . $ek) . " \e[0m \n ";
			echo "Generated : \e[32m $_1.$ek.$_2.$ek:" . md5($_1 . $ek . $_2 . $ek) . " \e[0m \n ";
			echo "Generated : \e[32m $ek.$_2.$ek.$_1.$ek:" . md5($ek . $_2 . $ek . $_1 . $ek) . " \e[0m \n ";
			echo "Generated : \e[32m $ek.$_1.$ek.$_2.$ek:" . md5($ek . $_1 . $ek . $_2 . $ek) . " \e[0m \n ";
			}
		elseif ($md5 == 0)
			{
			echo "Generated : \e[32m $_1.$ek.$_2 \e[0m \n ";
			echo "Generated : \e[32m $_2.$ek.$_1 \e[0m \n ";
			echo "Generated : \e[32m $ek.$_2.$_1 \e[0m \n ";
			echo "Generated : \e[32m $ek.$_1.$_2 \e[0m \n ";
			echo "Generated : \e[32m $_1.$_2.$ek \e[0m \n ";
			echo "Generated : \e[32m $_2.$_1.$ek \e[0m \n ";
			echo "Generated : \e[32m $_2.$ek.$_1.$ek \e[0m \n ";
			echo "Generated : \e[32m $_1.$ek.$_2.$ek \e[0m \n ";
			echo "Generated : \e[32m $ek.$_2.$ek.$_1.$ek \e[0m \n ";
			echo "Generated : \e[32m $ek.$_1.$ek.$_2.$ek \e[0m \n ";
			}

		$return[] = $_1 . $ek . $_2;
		$return[] = $_2 . $ek . $_1;
		$return[] = $ek . $_2 . $_1;
		$return[] = $ek . $_1 . $_2;
		$return[] = $_1 . $_2 . $ek;
		$return[] = $_2 . $_1 . $ek;
		$return[] = $_2 . $ek . $_1 . $ek;
		$return[] = $_1 . $ek . $_2 . $ek;
		$return[] = $ek . $_2 . $ek . $_1 . $ek;
		$return[] = $ek . $_1 . $ek . $_2 . $ek;
		}

	return $return;
	}

function _harf_rakamlama($keyword)
	{
	Global $_rakamlar_harf_karsiligi;
	$keyword = strtolower($keyword);
	$keys = array_keys($_rakamlar_harf_karsiligi);
	$values = array_values($_rakamlar_harf_karsiligi);
	$keyword = str_replace($keys, $values, $keyword);
	return [$keyword, strtoupper($keyword) ];
	}

function _clear_sesli_harf($keyword)
	{
	Global $_sesli_harfler_buyuk, $_sesli_harfler_kucuk;
	if (is_numeric($keyword)) return [];
	$return = [];
	$return[] = str_replace(array_merge($_sesli_harfler_buyuk, $_sesli_harfler_kucuk) , '', $keyword);
	return $return;
	}

function _keyword($keyword)
	{
	$return = [];
	$_islenen = 0;
	for ($i = 0; $i < strlen($keyword); $i++)
		{
		$keyword = strtolower($keyword);
		$keyword[$i] = ucwords($keyword[$i]);
		$return[] = $keyword;
		}

	$return[] = strtolower($keyword);
	$return[] = strtoupper($keyword);
	return $return;
	}


echo "\e[32m
#################################################################################

  _____________ ____________ _________ ___________ _________ _________._.
 /   _____/    |   \_   ___ \\_   ___ \\_   _____//   _____//   _____/| |
 \_____  \|    |   /    \  \//    \  \/ |    __)_ \_____  \ \_____  \ | |
 /        \    |  /\     \___\     \____|        \/        \/        \ \|
/_______  /______/  \______  /\______  /_______  /_______  /_______  / __
        \/                 \/        \/        \/        \/        \/  \/
 
 \n
 Github : https://github.com/tismayil/password-generator
 
#################################################################################	\n			  
\e[0m";


$file = "$params->path/$params->name";
$linecount = 0;
$handle = fopen($file, "r");

while (!feof($handle))
	{
	$line = fgets($handle);
	$linecount++;
	}

fclose($handle);
$genType = ($md5 == true) ? "password:md5" : "password";
echo " Victim informations : $params->info \n";
echo " File generated      : $params->path/$params->name \n";
echo " Generated passwords : $linecount \n";
echo " Generation type     : " . $genType . " \n";

if (isset($params->search))
	{
	$contents = file_get_contents($file);
	$pattern = preg_quote($params->search, '/');
	$pattern = "/^.*$pattern.*\$/m";
	if (preg_match_all($pattern, $contents, $matches))
		{
		echo " Found matches       : ";
		echo "\e[32m".implode("\n", $matches[0]) . " \e[0m";
		}
	  else
		{
		echo " Found matches       : ";
		echo "\e[31mNo matches found \e[0m";
		}

	echo "\n";
	}

echo "\n\n";

?>